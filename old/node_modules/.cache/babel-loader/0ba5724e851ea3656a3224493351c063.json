{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Joshua\\\\Documents\\\\GitHub\\\\biogloura\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Joshua\\\\Documents\\\\GitHub\\\\biogloura\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: storeProducts,\n      detailProduct: detailProduct,\n      cart: [],\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0 //componentDidMount(){\n      //    const savedState = JSON.parse(localStorage.getItem(\"State\"))\n      //    this.setProducts({...savedState});\n      //}\n\n    };\n\n    this.preStateSet = id => {\n      const savedState = JSON.parse(localStorage.getItem(\"State\"));\n      this.setState(() => {\n        return {\n          products: [savedState.products],\n          cart: [savedState.product]\n        };\n      }, () => {\n        let tempProducts = [...this.state.products];\n        const index = tempProducts.indexOf(this.getItem(id));\n        const product = tempProducts[index];\n        product.inCart = true;\n        product.count = 1;\n        const price = product.price;\n        product.total = price;\n        this.setState(() => {\n          return {\n            products: [...tempProducts],\n            cart: [...this.state.cart, product]\n          };\n        }, () => {\n          this.addTotals();\n          localStorage.setItem('State', JSON.stringify(this.state));\n        });\n      });\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      }, () => {\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      this.preStateSet(id);\n    };\n\n    this.increment = id => {\n      console.log('this is an increment');\n    };\n\n    this.decrement = id => {\n      console.log('this is an Decrement');\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.count = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('State', JSON.stringify(this.state));\n        console.log(\"test\");\n      });\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total);\n      const tempTax = subTotal * 0.1;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      }, () => {\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["C:\\Users\\Joshua\\Documents\\GitHub\\biogloura\\src\\context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","cartSubTotal","cartTax","cartTotal","preStateSet","id","savedState","JSON","parse","localStorage","getItem","setState","product","tempProducts","index","indexOf","inCart","count","price","total","addTotals","setItem","stringify","setProducts","forEach","item","singleItem","find","handleDetail","addToCart","increment","console","log","decrement","removeItem","tempCart","filter","removedProduct","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {storeProducts, detailProduct} from './data'\r\n\r\nconst ProductContext = React.createContext()\r\n\r\nclass ProductProvider extends Component {\r\n    state = {\r\n        products: storeProducts, \r\n        detailProduct: detailProduct,\r\n        cart: [],\r\n        cartSubTotal:0,\r\n        cartTax:0,\r\n        cartTotal:0\r\n    }\r\n\r\n    //componentDidMount(){\r\n    //    const savedState = JSON.parse(localStorage.getItem(\"State\"))\r\n    //    this.setProducts({...savedState});\r\n    //}\r\n\r\n    preStateSet = (id) =>{\r\n        const savedState = JSON.parse(localStorage.getItem(\"State\"))\r\n        this.setState(()=>{\r\n            return {products:[savedState.products],cart:[savedState.product]};\r\n        },()=>{ \r\n            let tempProducts = [...this.state.products];   \r\n            const index = tempProducts.indexOf(this.getItem(id));\r\n            const product = tempProducts[index];\r\n            product.inCart = true;\r\n            product.count = 1;\r\n            const price = product.price;\r\n            product.total = price;\r\n    \r\n            this.setState(()=>{\r\n                return {products:[...tempProducts],cart:[...this.state.cart,product]};\r\n            },()=>{ \r\n                this.addTotals();\r\n                localStorage.setItem('State',JSON.stringify(this.state));\r\n            });\r\n    \r\n           \r\n        });\r\n    }\r\n\r\n    setProducts = () =>{\r\n        let tempProducts = [];\r\n        storeProducts.forEach(item =>{\r\n            const singleItem = {...item};\r\n            tempProducts = [...tempProducts,singleItem];\r\n    \r\n        })\r\n        this.setState(()=>{\r\n            return {products:tempProducts}\r\n        },()=>{ \r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n        });\r\n    }\r\n\r\n    getItem = (id) =>{\r\n        const product = this.state.products.find(item => item.id === id);\r\n        return product; \r\n    }\r\n\r\n    handleDetail = (id) =>{ \r\n        const product = this.getItem(id);\r\n        this.setState(()=>{\r\n            return {detailProduct:product}\r\n        })        \r\n    }\r\n    \r\n    addToCart = id =>{\r\n        this.preStateSet(id);\r\n    };\r\n         \r\n    \r\n    \r\n    increment = (id) =>{\r\n        console.log('this is an increment')\r\n\r\n    }\r\n\r\n    decrement = (id) =>{\r\n        console.log('this is an Decrement')\r\n        \r\n    }\r\n    \r\n    removeItem = (id) => {\r\n        let tempProducts = [...this.state.products];\r\n        let tempCart = [...this.state.cart];\r\n\r\n        tempCart = tempCart.filter(item => item.id !== id);\r\n        \r\n        const index = tempProducts.indexOf(this.getItem(id));\r\n        let removedProduct = tempProducts[index];\r\n        removedProduct.inCart = false;\r\n        removedProduct.count = 0;\r\n        removedProduct.total = 0;\r\n\r\n        this.setState(()=>{\r\n            return {\r\n                cart:[...tempCart],\r\n                products:[...tempProducts],    \r\n            }\r\n        },\r\n        () => {\r\n            this.addTotals();\r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n        }\r\n        )\r\n    }\r\n\r\n    clearCart = () =>{\r\n        this.setState(()=>{\r\n            return {cart:[]};\r\n        },()=>{ \r\n            this.addTotals();\r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n            console.log(\"test\");\r\n        });\r\n    }\r\n\r\n    addTotals = () =>{\r\n        let subTotal = 0;\r\n        this.state.cart.map(item => (subTotal += item.total));\r\n        const tempTax = subTotal * 0.1;\r\n        const tax = parseFloat(tempTax.toFixed(2));\r\n        const total = subTotal + tax\r\n        this.setState (()=>{\r\n            return {\r\n                cartSubTotal: subTotal,\r\n                cartTax: tax,\r\n                cartTotal:total\r\n            }\r\n            },() => {\r\n                localStorage.setItem('State',JSON.stringify(this.state));\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n                return (\r\n                    <ProductContext.Provider value = {{\r\n                        ...this.state,\r\n                        handleDetail: this.handleDetail,\r\n                        addToCart: this.addToCart,\r\n                        increment: this.increment,\r\n                        decrement: this.decrement,\r\n                        removeItem: this.removeItem,\r\n                        clearCart: this.clearCart\r\n                    }}>\r\n                    {this.props.children} \r\n                    </ProductContext.Provider>\r\n                )\r\n        }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}