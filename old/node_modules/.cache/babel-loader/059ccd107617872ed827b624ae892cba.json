{"ast":null,"code":"import _objectSpread from \"C:\\\\Users\\\\Joshua\\\\Documents\\\\GitHub\\\\biogloura\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"C:\\\\Users\\\\Joshua\\\\Documents\\\\GitHub\\\\biogloura\\\\src\\\\context.js\";\nimport React, { Component } from 'react';\nimport { storeProducts, detailProduct } from './data';\nconst ProductContext = React.createContext();\n\nclass ProductProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      products: storeProducts,\n      detailProduct: detailProduct,\n      cart: [],\n      cartSubTotal: 0,\n      cartTax: 0,\n      cartTotal: 0 //componentDidMount(){\n      //    const savedState = JSON.parse(localStorage.getItem(\"State\"))\n      //    this.setProducts({...savedState});\n      //}\n\n    };\n\n    this.preStateSet = () => {\n      const savedState = [...localStorage.getItem('State')];\n      return savedState;\n    };\n\n    this.setProducts = () => {\n      let tempProducts = [];\n      storeProducts.forEach(item => {\n        const singleItem = _objectSpread({}, item);\n\n        tempProducts = [...tempProducts, singleItem];\n      });\n      this.setState(() => {\n        return {\n          products: tempProducts\n        };\n      }, () => {\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n\n    this.getItem = id => {\n      const product = this.state.products.find(item => item.id === id);\n      return product;\n    };\n\n    this.handleDetail = id => {\n      const product = this.getItem(id);\n      this.setState(() => {\n        return {\n          detailProduct: product\n        };\n      });\n    };\n\n    this.addToCart = id => {\n      this.preStateSet();\n      let tempProducts = [...this.state.products];\n      const index = tempProducts.indexOf(this.getItem(id));\n      const product = tempProducts[index];\n      product.inCart = true;\n      product.count = 1;\n      const price = product.price;\n      product.total = price;\n      this.setState(() => {\n        return {\n          products: [...tempProducts],\n          cart: [...this.state.cart, product]\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n\n    this.increment = id => {\n      console.log('this is an increment');\n    };\n\n    this.decrement = id => {\n      console.log('this is an Decrement');\n    };\n\n    this.removeItem = id => {\n      let tempProducts = [...this.state.products];\n      let tempCart = [...this.state.cart];\n      tempCart = tempCart.filter(item => item.id !== id);\n      const index = tempProducts.indexOf(this.getItem(id));\n      let removedProduct = tempProducts[index];\n      removedProduct.inCart = false;\n      removedProduct.count = 0;\n      removedProduct.total = 0;\n      this.setState(() => {\n        return {\n          cart: [...tempCart],\n          products: [...tempProducts]\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n\n    this.clearCart = () => {\n      this.setState(() => {\n        return {\n          cart: []\n        };\n      }, () => {\n        this.addTotals();\n        localStorage.setItem('State', JSON.stringify(this.state));\n        console.log(\"test\");\n      });\n    };\n\n    this.addTotals = () => {\n      let subTotal = 0;\n      this.state.cart.map(item => subTotal += item.total);\n      const tempTax = subTotal * 0.1;\n      const tax = parseFloat(tempTax.toFixed(2));\n      const total = subTotal + tax;\n      this.setState(() => {\n        return {\n          cartSubTotal: subTotal,\n          cartTax: tax,\n          cartTotal: total\n        };\n      }, () => {\n        localStorage.setItem('State', JSON.stringify(this.state));\n      });\n    };\n  }\n\n  render() {\n    return React.createElement(ProductContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        handleDetail: this.handleDetail,\n        addToCart: this.addToCart,\n        increment: this.increment,\n        decrement: this.decrement,\n        removeItem: this.removeItem,\n        clearCart: this.clearCart\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\n\nconst ProductConsumer = ProductContext.Consumer;\nexport { ProductProvider, ProductConsumer };","map":{"version":3,"sources":["C:\\Users\\Joshua\\Documents\\GitHub\\biogloura\\src\\context.js"],"names":["React","Component","storeProducts","detailProduct","ProductContext","createContext","ProductProvider","state","products","cart","cartSubTotal","cartTax","cartTotal","preStateSet","savedState","localStorage","getItem","setProducts","tempProducts","forEach","item","singleItem","setState","setItem","JSON","stringify","id","product","find","handleDetail","addToCart","index","indexOf","inCart","count","price","total","addTotals","increment","console","log","decrement","removeItem","tempCart","filter","removedProduct","clearCart","subTotal","map","tempTax","tax","parseFloat","toFixed","render","props","children","ProductConsumer","Consumer"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\r\nimport {storeProducts, detailProduct} from './data'\r\n\r\nconst ProductContext = React.createContext()\r\n\r\nclass ProductProvider extends Component {\r\n    state = {\r\n        products: storeProducts, \r\n        detailProduct: detailProduct,\r\n        cart: [],\r\n        cartSubTotal:0,\r\n        cartTax:0,\r\n        cartTotal:0\r\n    }\r\n\r\n    //componentDidMount(){\r\n    //    const savedState = JSON.parse(localStorage.getItem(\"State\"))\r\n    //    this.setProducts({...savedState});\r\n    //}\r\n\r\n    preStateSet = () =>{\r\n        const savedState = [...localStorage.getItem('State')];\r\n        return savedState;\r\n    }\r\n\r\n    setProducts = () =>{\r\n        let tempProducts = [];\r\n        storeProducts.forEach(item =>{\r\n            const singleItem = {...item};\r\n            tempProducts = [...tempProducts,singleItem];\r\n    \r\n        })\r\n        this.setState(()=>{\r\n            return {products:tempProducts}\r\n        },()=>{ \r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n        });\r\n    }\r\n\r\n    getItem = (id) =>{\r\n        const product = this.state.products.find(item => item.id === id);\r\n        return product; \r\n    }\r\n\r\n    handleDetail = (id) =>{ \r\n        const product = this.getItem(id);\r\n        this.setState(()=>{\r\n            return {detailProduct:product}\r\n        })        \r\n    }\r\n    \r\n    addToCart = id =>{\r\n        this.preStateSet();\r\n\r\n        let tempProducts = [...this.state.products];\r\n        const index = tempProducts.indexOf(this.getItem(id));\r\n        const product = tempProducts[index];\r\n        product.inCart = true;\r\n        product.count = 1;\r\n        const price = product.price;\r\n        product.total = price;\r\n\r\n        this.setState(()=>{\r\n            return {products:[...tempProducts],cart:[...this.state.cart,product]};\r\n        },()=>{ \r\n            this.addTotals();\r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n        });\r\n\r\n       \r\n    };\r\n         \r\n    \r\n    \r\n    increment = (id) =>{\r\n        console.log('this is an increment')\r\n\r\n    }\r\n\r\n    decrement = (id) =>{\r\n        console.log('this is an Decrement')\r\n        \r\n    }\r\n    \r\n    removeItem = (id) => {\r\n        let tempProducts = [...this.state.products];\r\n        let tempCart = [...this.state.cart];\r\n\r\n        tempCart = tempCart.filter(item => item.id !== id);\r\n        \r\n        const index = tempProducts.indexOf(this.getItem(id));\r\n        let removedProduct = tempProducts[index];\r\n        removedProduct.inCart = false;\r\n        removedProduct.count = 0;\r\n        removedProduct.total = 0;\r\n\r\n        this.setState(()=>{\r\n            return {\r\n                cart:[...tempCart],\r\n                products:[...tempProducts],    \r\n            }\r\n        },\r\n        () => {\r\n            this.addTotals();\r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n        }\r\n        )\r\n    }\r\n\r\n    clearCart = () =>{\r\n        this.setState(()=>{\r\n            return {cart:[]};\r\n        },()=>{ \r\n            this.addTotals();\r\n            localStorage.setItem('State',JSON.stringify(this.state));\r\n            console.log(\"test\");\r\n        });\r\n    }\r\n\r\n    addTotals = () =>{\r\n        let subTotal = 0;\r\n        this.state.cart.map(item => (subTotal += item.total));\r\n        const tempTax = subTotal * 0.1;\r\n        const tax = parseFloat(tempTax.toFixed(2));\r\n        const total = subTotal + tax\r\n        this.setState (()=>{\r\n            return {\r\n                cartSubTotal: subTotal,\r\n                cartTax: tax,\r\n                cartTotal:total\r\n            }\r\n            },() => {\r\n                localStorage.setItem('State',JSON.stringify(this.state));\r\n            }\r\n        );\r\n    }\r\n\r\n    render() {\r\n                return (\r\n                    <ProductContext.Provider value = {{\r\n                        ...this.state,\r\n                        handleDetail: this.handleDetail,\r\n                        addToCart: this.addToCart,\r\n                        increment: this.increment,\r\n                        decrement: this.decrement,\r\n                        removeItem: this.removeItem,\r\n                        clearCart: this.clearCart\r\n                    }}>\r\n                    {this.props.children} \r\n                    </ProductContext.Provider>\r\n                )\r\n        }\r\n}\r\n\r\nconst ProductConsumer = ProductContext.Consumer;\r\n\r\nexport {ProductProvider, ProductConsumer};"]},"metadata":{},"sourceType":"module"}